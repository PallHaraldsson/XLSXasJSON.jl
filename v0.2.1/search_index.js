var documenterSearchIndex = {"docs":
[{"location":"userguide/#XLSXasJSON-[[KR](https://github.com/devsisters/XLSXasJSON.jl/blob/master/README_kr.md)]-1","page":"User Guide","title":"XLSXasJSON [KR]","text":"","category":"section"},{"location":"userguide/#","page":"User Guide","title":"User Guide","text":"(Image: ) (Image: )","category":"page"},{"location":"userguide/#Introduction-1","page":"User Guide","title":"Introduction","text":"","category":"section"},{"location":"userguide/#","page":"User Guide","title":"User Guide","text":"Designated row or colum must be standardized JSONPointer token, ramaning rows will passed to json encoded file.","category":"page"},{"location":"userguide/#Usage-1","page":"User Guide","title":"Usage","text":"","category":"section"},{"location":"userguide/#","page":"User Guide","title":"User Guide","text":"    using XLSXasJSON, JSON\r\n\r\n    p = joinpath(dirname(pathof(XLSXasJSON)), \"../test/data\")\r\n    xf = joinpath(p, \"examples.xlsx\")\r\n    jws = JSONWorksheet(xf, :example1)\r\n\r\n    # turns into json object\r\n    JSON.json(jws)\r\n    # saves with indent\r\n    XLSXasJSON.write(\"examples_example1.json\", jws; indent = 2)","category":"page"},{"location":"userguide/#Examples-1","page":"User Guide","title":"Examples","text":"","category":"section"},{"location":"userguide/#Any-1","page":"User Guide","title":"Any","text":"","category":"section"},{"location":"userguide/#","page":"User Guide","title":"User Guide","text":"A simple, row oriented key","category":"page"},{"location":"userguide/#","page":"User Guide","title":"User Guide","text":"/color\nred","category":"page"},{"location":"userguide/#","page":"User Guide","title":"User Guide","text":"produces","category":"page"},{"location":"userguide/#","page":"User Guide","title":"User Guide","text":"[{\r\n  \"color\": \"red\"\r\n}]","category":"page"},{"location":"userguide/#Dict-1","page":"User Guide","title":"Dict","text":"","category":"section"},{"location":"userguide/#","page":"User Guide","title":"User Guide","text":"A dotted key name looks like","category":"page"},{"location":"userguide/#","page":"User Guide","title":"User Guide","text":"/color/name color/value\nred #f00","category":"page"},{"location":"userguide/#","page":"User Guide","title":"User Guide","text":"and produces","category":"page"},{"location":"userguide/#","page":"User Guide","title":"User Guide","text":"[{\r\n  \"color\": {\r\n    \"name\": \"red\",\r\n    \"value\": \"#f00\"\r\n    }\r\n}]","category":"page"},{"location":"userguide/#","page":"User Guide","title":"User Guide","text":"It can has as many layers as you want","category":"page"},{"location":"userguide/#","page":"User Guide","title":"User Guide","text":"/a/b/c/d/e/f\nIt can be done","category":"page"},{"location":"userguide/#","page":"User Guide","title":"User Guide","text":"and produces","category":"page"},{"location":"userguide/#","page":"User Guide","title":"User Guide","text":"[{\r\n    \"a\": {\r\n      \"b\": {\r\n        \"c\": {\r\n          \"d\": {\r\n            \"e\": {\r\n              \"f\": \"It can be done\"\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }]\r\n","category":"page"},{"location":"userguide/#Array-1","page":"User Guide","title":"Array","text":"","category":"section"},{"location":"userguide/#","page":"User Guide","title":"User Guide","text":"Sometimes it's convinient to put array values in seperate column in XLSX ","category":"page"},{"location":"userguide/#","page":"User Guide","title":"User Guide","text":"/color/name color/rgb/1 color/rgb/2 color/rgb/3\nred 255 0 0","category":"page"},{"location":"userguide/#","page":"User Guide","title":"User Guide","text":"[{\r\n  \"color\": {\r\n    \"name\": \"red\",\r\n    \"rgb\": [255, 0, 0]\r\n    }\r\n}]","category":"page"},{"location":"userguide/#Type-Declarations-1","page":"User Guide","title":"Type Declarations","text":"","category":"section"},{"location":"userguide/#","page":"User Guide","title":"User Guide","text":"You can declare Type with :: operator same way as Julia.","category":"page"},{"location":"userguide/#","page":"User Guide","title":"User Guide","text":"value of Vector will be splitted with deliminator ';'.\nOnly json supported types will be checked for validation","category":"page"},{"location":"userguide/#","page":"User Guide","title":"User Guide","text":"/array::Vector /array_int::Vector{Int} /array_float::Vector{Float64}\n100;200;300 100;200;300 100;200;300","category":"page"},{"location":"userguide/#","page":"User Guide","title":"User Guide","text":"and produces","category":"page"},{"location":"userguide/#","page":"User Guide","title":"User Guide","text":"[{\r\n  \"array\": [\r\n    \"100\",\r\n    \"200\",\r\n    \"300\"\r\n  ],\r\n  \"array_int\": [\r\n    100,\r\n    200,\r\n    300\r\n  ],\r\n  \"array_float\": [\r\n    100.0,\r\n    200.0,\r\n    300.0\r\n  ]\r\n}]","category":"page"},{"location":"userguide/#All-of-the-above-1","page":"User Guide","title":"All of the above","text":"","category":"section"},{"location":"userguide/#","page":"User Guide","title":"User Guide","text":"Now you know all the rules necessary to create any json data structure you want with just a column name This is a more complete row oriented example","category":"page"},{"location":"userguide/#","page":"User Guide","title":"User Guide","text":"/a/b /a/b2::Vector{Int} /a/b3/1,Type /a/b3/1/Amount /a/b3/2/Type /a/b3/2/Amount /a/b3/3/Type /a/b3/3/Amount::Vector\nFooood 100;200;300 Cake 50 Chocolate 19 Ingredient Salt;100","category":"page"},{"location":"userguide/#","page":"User Guide","title":"User Guide","text":"would produce","category":"page"},{"location":"userguide/#","page":"User Guide","title":"User Guide","text":"[\r\n  {\r\n    \"a\": {\r\n      \"b\": \"Fooood\",\r\n      \"b2\": [\r\n        100,\r\n        200,\r\n        300\r\n      ],\r\n      \"b3\": [\r\n        {\r\n          \"Type\": \"Cake\",\r\n          \"Amount\": 50\r\n        },\r\n        {\r\n          \"Type\": \"Chocolate\",\r\n          \"Amount\": 19\r\n        },\r\n        {\r\n          \"Type\": \"Ingredient\",\r\n          \"Amount\": [\r\n            \"Salt\",\r\n            \"100\"\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  }\r\n]\r\n","category":"page"},{"location":"userguide/#","page":"User Guide","title":"User Guide","text":"You can do same with column oriented sheets. with row_oriented = false keyword argument. ","category":"page"},{"location":"#XLSXasJSON.jl-1","page":"Index","title":"XLSXasJSON.jl","text":"","category":"section"},{"location":"#","page":"Index","title":"Index","text":"A Julia package ","category":"page"},{"location":"#","page":"Index","title":"Index","text":"","category":"page"},{"location":"#Authors-1","page":"Index","title":"Authors","text":"","category":"section"},{"location":"#License-1","page":"Index","title":"License","text":"","category":"section"},{"location":"#Installation-1","page":"Index","title":"Installation","text":"","category":"section"},{"location":"#","page":"Index","title":"Index","text":"pkg> add(\"XLSXasJSON\")","category":"page"},{"location":"#Related-packages-1","page":"Index","title":"Related packages","text":"","category":"section"},{"location":"#Acknowledgments-1","page":"Index","title":"Acknowledgments","text":"","category":"section"}]
}
